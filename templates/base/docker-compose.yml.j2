version: '3.8'

services:
  qdrant:
    image: qdrant/qdrant:latest
    restart: always
    container_name: qdrant
    ports:
      - 6333:6333
      - 6334:6334
    expose:
      - 6333
      - 6334
      - 6335
    volumes:
      - ./qdrant_data:/qdrant/storage
    networks:
      - app-network

{% if embedding.model == "all-MiniLM-L6-v2" %}
  torchserve:
    image: ghcr.io/clems4ever/torchserve-all-minilm-l6-v2:latest
    restart: always
    ports:
      - "8080:8080"
    stdin_open: true
    container_name: torchserve
    tty: true
    networks:
      - app-network
    expose:
      - 8080
{% endif %}

{% if embedding.model == "Jina" and embedding.deployment == "local" %}
  jina:
    image: jinaai/jina-embeddings-v2-base-en:latest
    restart: always
    ports:
      - "8080:8080"
    container_name: jina
    environment:
      - JINA_LOG_LEVEL=INFO
    networks:
      - app-network
    expose:
      - 8080
{% endif %}

  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: backend-container
    ports:
      - "8000:8000"
    expose:
      - 8000
    networks:
      - app-network
    depends_on:
      - qdrant
{% if embedding.model == "all-MiniLM-L6-v2" %}
      - torchserve
{% elif embedding.model == "Jina" and embedding.deployment == "local" %}
      - jina
{% endif %}
    restart: always
{% if embedding.model == "all-MiniLM-L6-v2" %}
    entrypoint: ["sh", "-c", "until nc -z torchserve 8080; do sleep 2; done; uvicorn app:app --host 0.0.0.0 --port 8000 --workers 4"]
{% elif embedding.model == "Jina" and embedding.deployment == "local" %}
    entrypoint: ["sh", "-c", "until nc -z jina 8080; do sleep 2; done; uvicorn app:app --host 0.0.0.0 --port 8000 --workers 4"]
{% else %}
    entrypoint: ["uvicorn", "app:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"]
{% endif %}

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: frontend-container
    ports:
      - "8501:8501"
    expose:
      - 8501
    networks:
      - app-network
    restart: always
    depends_on:
      - backend

networks:
  app-network:
    driver: bridge